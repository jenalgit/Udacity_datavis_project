quit
exit
help()
ls()
ls()
?getClass()
getClass(lm)
getClass('lm')
getMethod('lm')
showMethods('lm')
showMethods('ggplot')
showMethods('shiny')
showMethods('deployApp')
showMethods('show')
?lm
?colStats
?colSsums
?colSums
?show
?dgamma
?colSums
getClass('show')
show()
getClass(show)
show()
?show()
showMethods(show)
getMethod(show)
getS3Method(show)
getS3method(show)
getMethod(show)
getMethod(colSums)
getMethod('colSums')
getMethod('show')
getMethod('show')
getMethod('show')
getMethod('lm')
getMethod('dgamma')
getMethod('colSums')
getMethod('show')
getMethod(show)
getMethod(lm)
getMethod(dgamma)
getMethod(mean)
getMethod(show)
getMethod(colSums)
getMethod(mean)
getMethod(lm)
getMethod(dgamma)
?dgamma
?mean
swirl()
library(swirl)
swirl()
bye()
swirl()
bye()
swirl()
bye
bye()
swirl()
bye
bye()
swirl()
ravenData
mdl <- glm(ravenWinNum ~ ravennScore, ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, ravenData)
1
mdl <- glm(ravenWinNum ~ ravenScore, family=binomial,
| data=ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, family=binomial, data=ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
bye()
swirl()
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, family = 'binomial', ravenData)
lodds <- predict(mdl, data.frame(ravenScore = c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000,50))
nxt()
head(hits)
class(hits[,'date'])
as.integer(head(hits[',date']))
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ data, poisson, hits)
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl,'date'))
which.max(hits[,'visits'])
hits[704,]
mdl$fitted.values[704]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(visits ~ simplystatistics, offset = log(visits + 1), leek)
mdl2 <- glm(visits ~ simplystatistics, offset = log(visits + 1), data)
mdl2 <- glm(visits ~ simplystatistics, offset = log(visits + 1), hits)
mdl2 <- glm(visits ~ simplystatistics, offset = log(visits + 1), family = poisson, hits)
mdl2 <- glm(visits ~ simplystats, offset = log(visits + 1), family = poisson, hits)
mdl2 <- glm(simplystats ~ date, family = poisson, data = hits, offset = log(visits) + 1)
mdl2 <- glm(simplystats ~ date, family = poisson, data = hits, offset = log(visits+1))
qpois(.95, mdl2$fitted.values[704])
library(MASS)
data(shuttle)
?shuttle
head(shuttle)
tail(shuttle)
mdl1 <- glm(use ~ wind, family = 'binomial', data= shuttle)
summary(mdl1)
mdl1
summary(shuttle$use)
str(shuttle$use)
head(auto)
head(shuttle$auto)
head(shuttle$use)
summary(mdl1)
exp(mdl1$coefficients)
mdl2 <- glm(use ~ wind + magn, family = 'binomial', data = shuttle)
exp(mdl2$ceofficients)
exp(mdl2$coefficients)
summary(mdl1)
mdl1 <- glm(use ~ as.factor(wind), family = 'binomial', data= shuttle)
summary(mdl1)
str(shuttle)
mdl1 <- glm(use ~ wind, family = 'binomial', data= shuttle)
summary(mdl1)
str(shuttle$use)
head(shuttle$use, 20)
shuttle$use
exp(mdl1$coefficients)
exp(mdl1$coefficients[1])/exp(mdl1$coefficients[2])
str(shuttle)
?relevel
?level
tail(shuttle)
mdl1 <- glm(use ~ wind, family = 'binomial', data= shuttle)
summary(mdl1)
exp(mdl1$coefficients)
mdl2 <- glm(use ~ wind + magn, family = 'binomial', data = shuttle)
exp(mdl2$coefficients)
1/.969
as.numeric(shuttle$use)
?relevel
shuttle$use <- relevel(shuttle$use, ref = 'noauto')
as.numeric(shuttle$use)
?levels
levels(shuttle$use)[0] <- 'noauto'
as.numeric(shuttle$use)
shuttle$use <- factor(shuttle$use, labels = c(0,1))
as.numeric(shuttle$use)
shuttle$use <- factor(shuttle$use, labels = c('0','1'))
as.numeric(shuttle$use)
str(shuttle$use)
library(MASS)
data(shuttle)
head(shuttle)
tail(shuttle)
?relabel
?relevel
shuttle$use <- relevel(shuttle$use, ref = 'noauto')
mdl1 <- glm(use ~ wind, family = 'binomial', data= shuttle)
summary(mdl1)
exp(mdl1$coefficients)
data(shuttle)
head(shuttle)
tail(shuttle)
data(shuttle)
shuttle$use <- relevel(shuttle$use, ref = 'noauto')
str(shuttle$wind)
head(shuttle$wind)
shuttle$wind <- relevel(shuttle$use, ref = 'tail')
shuttle$wind <- relevel(shuttle$wind, ref = 'tail')
mdl1 <- glm(use ~ wind, family = 'binomial', data= shuttle)
summary(mdl1)
exp(mdl1$coefficients)
1..777
1/.777
1/0.7777778
exp(1/0.7777778)
exp(1)/0.7777778
mdl2 <- glm(use ~ wind + magn, family = 'binomial', data = shuttle)
exp(mdl2$coefficients)
summary(mdl2)
data(InsectSprays)
summary(InsectSprays)
mdl4 <- glm(count ~ spray, family = 'poisson', data = InsectSprays)
summary(mdl4)
mdl4$coef[2]
mdl4$coef[1]/(mdl4$coef[1]+mdl4$coef[2])
2.67/2.72
str(InsectSprays)
mdl4$coef[1]/(mdl4$coef[1]+mdl4$coef[2])
data(InsectSprays)
mdl4 <- glm(count ~ spray, family = 'poisson', data = InsectSprays)
summary(mdl4)
summary(mdl4)
mdl4$coef[1]/(mdl4$coef[1]+mdl4$coef[2])
mdl4 <- glm(count ~ factor(spray), family = 'poisson', data = InsectSprays)
summary(mdl4)
exp(mdl4$coefficients)
14.5/15.55
14.5/15.5574713
mdl4 <- glm(count ~ spray, family = 'poisson', data = InsectSprays)
summary(mdl4)
mdl4$coef[1]/(mdl4$coef[1]+mdl4$coef[2])
1/mdl4$coef[1]/(mdl4$coef[1]+mdl4$coef[2])
1/(mdl4$coef[1]/(mdl4$coef[1]+mdl4$coef[2]))
(mdl4$coef[1]/(mdl4$coef[1]+mdl4$coef[2]))
summary(mdl4)
(mdl4$coef[1]/(mdl4$coef[1]+mdl4$coef[2]))
(mdl4$coef[1]/(mdl4$coef[1]+mdl4$coef[3]))
(mdl4$coef[1]/(mdl4$coef[1]+mdl4$coef[4]))
(mdl4$coef[1]/(mdl4$coef[1]+mdl4$coef[5]))
(mdl4$coef[1]/(mdl4$coef[1]+mdl4$coef[6]))
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x <- 0:5
y <- c(0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
> y <- c(0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
y <- c(0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x <- 0:5
lm(y ~ x)
library(RMarkdown)
getwd()
setwd('Udacity/d3_js/final_project/Udacity_datavis_project/data/')
ls
getwd()
library(ggplot2)
library(reshape2)
library(dplyr)
library(xlsx)
ls
list.files()
list.files()
sugar <- read.xlsx('indicator sugar_consumption.xlsx',1)
head(sugar)
bmi <- read.xlsx('Indicator_BMI male ASM.xlsx', 1)
gdp <- read.xlsx('GDPpercapitaconstant2000US.xlsx', 1)
sugar$X2004 <- NULL # 2004 data was a copy of 2003 data
colnames(sugar) <- substr(names(sugar), 2, 5)  # Remove the X from the Year
sugar.t <- data.frame(t(sugar)) # Create a transposed data frame to be used later
sugar$country <- rownames(sugar) # Create a column with the Country Names
sugar.long <- melt(sugar, id.var = 'country') # Melt into 3-variable dataframe
colnames(sugar.long)[2] <- 'year' # Rename from "variable"
colnames(sugar.long)[3] <- 'gmssugar' # Rename from "value"
head(sugar.long)
names(sugar)
head(sugar)
names(sugar)[1]
sugar$X2004 <- NULL # 2004 data was a copy of 2003 data
colnames(sugar) <- substr(names(sugar), 2, 5)  # Remove the X from the Year
sugar.t <- data.frame(t(sugar)) # Create a transposed data frame to be used later
names(sugar)[1] = 'country' # Rename column 1 into "country"
sugar.long <- melt(sugar, id.var = 'country') # Melt into 3-variable dataframe
colnames(sugar.long)[2] <- 'year' # Rename from "variable"
colnames(sugar.long)[3] <- 'gmssugar' # Rename from "value"
head(sugar.long)
library(ggplot2)
library(reshape2)
library(dplyr)
library(xlsx)
sugar <- read.xlsx('indicator sugar_consumption.xlsx',1)
bmi <- read.xlsx('Indicator_BMI male ASM.xlsx', 1)
gdp <- read.xlsx('GDPpercapitaconstant2000US.xlsx', 1)
sugar$X2004 <- NULL # 2004 data was a copy of 2003 data
colnames(sugar) <- substr(names(sugar), 2, 5)  # Remove the X from the Year
sugar.t <- data.frame(t(sugar)) # Create a transposed data frame to be used later
names(sugar)[1] = 'country' # Rename column 1 into "country"
sugar.long <- melt(sugar, id.var = 'country') # Melt into 3-variable dataframe
colnames(sugar.long)[2] <- 'year' # Rename from "variable"
colnames(sugar.long)[3] <- 'gmssugar' # Rename from "value"
head(sugar.long)
tail(sugar.long)
tail(sugar.long)[40]
tail(sugar.long, 40)
names(sugar)
sugar$A..1
sugar$A..1 <- NULL # strange last column
sugar.t <- data.frame(t(sugar)) # Create a transposed data frame to be used later
names(sugar)[1] = 'country' # Rename column 1 into "country"
sugar.long <- melt(sugar, id.var = 'country') # Melt into 3-variable dataframe
colnames(sugar.long)[2] <- 'year' # Rename from "variable"
colnames(sugar.long)[3] <- 'gmssugar' # Rename from "value"
tail(sugar.long)
tail(sugar.long,40)
names(bmi)
names(sugar)[1] = 'Country' # Rename column 1 into "country"
sugar.long <- melt(sugar, id.var = 'Country') # Melt into 3-variable dataframe
colnames(sugar.long)[2] <- 'year' # Rename from "variable"
colnames(sugar.long)[3] <- 'gmssugar' # Rename from "value"
colnames(bmi) <- substr(names(bmi), 2, 5)
names(bmi)
names(bmi)[1] <- 'Country'
names(bmi)
bmi.long <- melt(bmi, id.var = 'Country')
names(sugar.long)[2] <- 'year'
names(sugar.long)[3] <- 'bmi'
names(sugar.long)[2] <- 'year' # Rename from "variable"
names(sugar.long)[3] <- 'gmssugar' # Rename from "value"
names(bmi.long)[2] <- 'year'
names(bmi.long)[3] <- 'bmi'
head(bmi)
head(bmi.long)
tail(bmi.long)
names(gdp) <- substr(names(gdp), 2, 5)
names(gdp)
head(gdp)
names(gdp)[1] <- 'Country'
gdp.long <- melt(gdp, id.var = 'Country')
names(gdp.long)[2] <- 'year'
names(gdp.long)[3] <- 'income'
head(gdp.long)
tail(gdp.long)
tail(gdp.long,40)
sugar.bmi.gdp <- merge(sugar.long, bmi.long, gdp.long)
sugar.bmi <- merge(sugar.long, bmi.long)
sugar.bmi.gdp <- merge(sugar.bmi, gdp.long)
head(sugar.bmi.gdp)
head(sugar.bmi.gdp,40)
subset(sugar.bmi.gdp, 'Country' == 'United States')
subset(sugar.bmi.gdp, Country == 'United States')
ggplot(aes(x = gmssugar, y = bmi), data = sugar.bmi.gdp) +
geom_jitter(alpha = 0.5, color = 'orange') +
geom_smooth(method = 'lm', color = 'black') +
xlab('Daily Sugar (gm/person)') + ylab('Avg Male BMI')  +
ggtitle('Male BMI vs Sugar Consumption') +
theme_minimal()
ggplot(aes(x = gmssugar, y = gdp), data = sugar.bmi.gdp) +
geom_jitter(alpha = 0.5, color = 'orange') +
geom_smooth(method = 'lm', color = 'black') +
xlab('Daily Sugar (gm/person)') + ylab('Avg Male BMI')  +
ggtitle('Male BMI vs Sugar Consumption') +
theme_minimal()
names(gdp.long)[3] <- 'gdp'
sugar.bmi <- merge(sugar.long, bmi.long)
sugar.bmi.gdp <- merge(sugar.bmi, gdp.long)
ggplot(aes(x = gmssugar, y = gdp), data = sugar.bmi.gdp) +
geom_jitter(alpha = 0.5, color = 'orange') +
geom_smooth(method = 'lm', color = 'black') +
xlab('Daily Sugar (gm/person)') + ylab('Avg Male BMI')  +
ggtitle('Male BMI vs Sugar Consumption') +
theme_minimal()
ggplot(aes(x = gmssugar, y = bmi), data = sugar.bmi.gdp) +
geom_jitter(alpha = 0.5, color = 'cyan') +
geom_smooth(method = 'lm', color = 'black') +
xlab('Daily Sugar (gm/person)') + ylab('Avg Male BMI')  +
ggtitle('Male BMI vs Sugar Consumption') +
theme_minimal()
ggplot(aes(x = gmssugar, y = bmi), data = sugar.bmi.gdp) +
geom_jitter(alpha = 0.5, color = 'orange') +
geom_smooth(method = 'lm', color = 'black') +
xlab('Daily Sugar (gm/person)') + ylab('Avg Male BMI')  +
ggtitle('Male BMI vs Sugar Consumption') +
theme_minimal()
list.files()
list.files()
cals <- read.xls('Indicator_TC male ASM.xlsx', 1)
cals <- read.xlsx('Indicator_TC male ASM.xlsx', 1)
regions <- read.xlsx('Color- Regions.xlsx', 2)
head(regions)
names(cals)
head(cals)
names(cals) <- substr(names(cals), 2, 5)
names(cals)[1] <- 'Country'
cals.long <- melt(cals, id.var = 'Country')
names(cals.long)[2] <- 'year'
names(cals.long)[3] <- 'calories'
head(cals.long)
tail(cals.long)
head(cals)
cals <- read.xlsx('indicator food_consumption.xlsx', 1)
names(cals) <- substr(names(cals), 2, 5)
names(cals)[1] <- 'Country'
cals.long <- melt(cals, id.var = 'Country')
names(cals.long)[2] <- 'year'
names(cals.long)[3] <- 'calories'
head(cals.long)
tail(cals.long)
cals.sugar.bmi.gdp <- merge(sugar.bmi.gdp, cals.long)
head(cals.sugar.bmi.gdp)
tail(cals.sugar.bmi.gdp)
head(regions)
regions <- regions[,1:3]
regions
head(regions)
names(regions) <= c('Country','Region','Digraph')
names(regions) <- c('Country','Region','Digraph')
head(regions)
?merge
test <- merge(cals.sugar.bmi.gdp, regions)
head(test)
df_final <- merge(cals.sugar.bmi.gdp, regions)
head(df_final)
dim(df_final)
sum(is.na(df_final$gmssugar))
sum(is.na(df_final$gdp))
sum(is.na(df_final$calories))
sum(complete.cases(df_final))
3387+858
write.csv(df_final)
?write.csv
write.csv(df_final, file = 'cals_sugar_bmi_gdp.csv')
write.csv(df_final, file = 'cals_sugar_bmi_gdp.csv', row.names = FALSE)
write.csv(df_final, file = 'cals_sugar_bmi_gdp.csv', row.names = FALSE)
write.csv(complete.cases(df_final), file = 'compcases_cals_sugar_bmi_gdp.csv',
row.names = FALSE)
write.csv(df_final, file = 'cals_sugar_bmi_gdp.csv', row.names = FALSE)
write.csv(df_final[complete.cases(df_final),],
file = 'compcases_cals_sugar_bmi_gdp.csv', row.names = FALSE)
sum(complete.cases(df_final))
subset(df_final, Country == 'Russia')
subset(df_final, Country == 'Bermuda')
length(subset(df_final, Country == 'Bermuda'))
nrow(subset(df_final, Country == 'Bermuda'))
subset(df_final, Country == 'Bermuda')$calories
sum(subset(df_final, Country == 'Bermuda')$calories)
sum(subset(df_final, Country == 'Bermuda')$bmi)
sum(subset(df_final, Country == 'Nauru')$bmi)
sum(df_final$bmi)
mean(df_final$gmssugar)
mean(subset(df_final, !is.na(gmssugar))$gmssugar
)
sum(df_final$gmssugar)
sum(subset(df_final, !is.na(gmssugar))$gmssugar)
283430.1/nrow(df_final)
283430.1/nrow(df_final[complete.cases(df_final),])
df_final$gmssugar
df_final$gmssugar
df_final$gdp.sqrt <- sqrt(df_final$gdp)
# Write all data, with NAs
write.csv(df_final, file = 'cals_sugar_bmi_gdp.csv', row.names = FALSE)
# Write only data with complete cases
write.csv(df_final[complete.cases(df_final),],
file = 'compcases_cals_sugar_bmi_gdp.csv', row.names = FALSE)
library(ggplot2)
library(reshape2)
library(dplyr)
library(xlsx)
sugar <- read.xlsx('indicator sugar_consumption.xlsx',1)
bmi <- read.xlsx('Indicator_BMI male ASM.xlsx', 1)
gdp <- read.xlsx('GDPpercapitaconstant2000US.xlsx', 1)
cals <- read.xlsx('indicator food_consumption.xlsx', 1)
regions <- read.xlsx('Color- Regions.xlsx', 2)
sugar$X2004 <- NULL # 2004 data was a copy of 2003 data
colnames(sugar) <- substr(names(sugar), 2, 5)  # Remove the X from the Year
sugar$A..1 <- NULL # strange last column
sugar.t <- data.frame(t(sugar)) # Create a transposed data frame to be used later
names(sugar)[1] <- 'Country' # Rename column 1 into "country"
sugar.long <- melt(sugar, id.var = 'Country') # Melt into 3-variable dataframe
names(sugar.long)[2] <- 'Year' # Rename from "variable"
names(sugar.long)[3] <- 'Sugar Consumption' # Rename from "value"
colnames(bmi) <- substr(names(bmi), 2, 5)
names(bmi)[1] <- 'Country'
bmi.long <- melt(bmi, id.var = 'Country')
names(bmi.long)[2] <- 'Year'
names(bmi.long)[3] <- 'Body Mass Index'
names(gdp) <- substr(names(gdp), 2, 5)
names(gdp)[1] <- 'Country'
gdp.long <- melt(gdp, id.var = 'Country')
names(gdp.long)[2] <- 'Year'
names(gdp.long)[3] <- 'GDP Per Capita'
names(cals) <- substr(names(cals), 2, 5)
names(cals)[1] <- 'Country'
cals.long <- melt(cals, id.var = 'Country')
names(cals.long)[2] <- 'Year'
names(cals.long)[3] <- 'Calories Per Day'
regions <- regions[,1:3]
names(regions) <- c('Country','Region','Digraph')
sugar.bmi <- merge(sugar.long, bmi.long)
sugar.bmi.gdp <- merge(sugar.bmi, gdp.long)
cals.sugar.bmi.gdp <- merge(sugar.bmi.gdp, cals.long)
df_final <- merge(cals.sugar.bmi.gdp, regions)
df_final$GDP.sqrt <- sqrt(df_final['GDP Per Capita'])
names(df_final)
head(df_final)
tail(df_final)
# Write all data, with NAs
write.csv(df_final, file = 'cals_sugar_bmi_gdp.csv', row.names = FALSE)
# Write only data with complete cases
write.csv(df_final[complete.cases(df_final),],
file = 'compcases_cals_sugar_bmi_gdp.csv', row.names = FALSE)
names(df_final)
length(df_final$Country)
length(df_final$Year)
length(df_final$Sugar Consumption)
length(df_final['Sugar Consumption'])
length(df_final['Sugar Consumption',])
length(df_final[,'Sugar Consumption'])
df_final$GDP.sqrt <- sqrt(df_final[,'GDP Per Capita'])
# Write all data, with NAs
write.csv(df_final, file = 'cals_sugar_bmi_gdp.csv', row.names = FALSE)
# Write only data with complete cases
write.csv(df_final[complete.cases(df_final),],
file = 'compcases_cals_sugar_bmi_gdp.csv', row.names = FALSE)
names(df_final)
tail(df_final)
names(df_final)
subset(df_final, Country = 'Vietnam')
subset(df_final, Country == 'Vietnam')
names(df_final)
summary(df_final[,'Sugar Consumption'])
view(subset(df_final, Year == 2001))
view(df_final)
View(df_final)
View(df_final)
View(subset(df_final, Year == 2001))
